---
# Source: inrastructure-grafana/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: infra-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: infra-grafana
    app.kubernetes.io/version: "9.3.6"
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: infra-grafana
---
# Source: inrastructure-grafana/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: infra-monitoring
  annotations:
    ## Rolls pod if configmap is updated
    checksum/config: a09839b89a98b9952f20e2857aa7a643cbe0bbea53d173eb6c7f91f3980347b2
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: infra-grafana
    app.kubernetes.io/version: "9.3.1"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: infra-grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: infra-grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      enableServiceLinks: true
      containers:
        - name: grafana
          image: "sko-vcf-w01-harbor-01.vgregion.se/infra/grafana:9.3.6"
          imagePullPolicy: Always
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: "datasources.yaml"
            - name: dex-secret
              mountPath: /etc/dex-secret
              readOnly: true
          ports:
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
      hostAliases:
        - hostnames:
          - auth-dev.k8s.vgregion.se
          ip: 10.231.115.60
      volumes:
        - name: config
          configMap:
            name: grafana
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: dex-secret
          secret:
            secretName: dex-client-secret
---
# Source: inrastructure-grafana/templates/ingress.yaml
# Source: grafana/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana
  namespace: infra-monitoring
  annotations:
    # placeholder to build locally without errors
    cluster-name: placeholder
    middlewaregruppen.se/managed-dns: "true"
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: infra-grafana
    app.kubernetes.io/version: "9.3.6"
spec:
  ingressClassName: nginx
  rules:
    - host: -grafana.k8s.vgregion.se
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 80
  tls:
  - hosts:
    - -grafana.k8s.vgregion.se
